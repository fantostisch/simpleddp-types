--- a/simpleddp/classes/ddpCollection.d.ts
+++ b/simpleddp/classes/ddpCollection.d.ts
@@ -4,7 +4,7 @@
  * @param {String} name - Collection name.
  * @param {simpleDDP} server - simpleDDP instance.
  */
-export class ddpCollection {
+export class ddpCollection<T> {
     constructor(name: any, server: any);
     _name: any;
     _server: any;
@@ -16,7 +16,7 @@
      * @param {Function} f - Filter function, recieves as arguments object, index and array.
      * @return {this}
      */
-    public filter(f: Function): this;
+    public filter(f: ((value: T, index: number, collection: T[]) => boolean)): this;
     /**
      * Imports data inside the collection and emits all relevant events.
      * Both string and JS object types are supported.
@@ -30,7 +30,7 @@
      * @param {string} [format='string'] - If 'string' then returns EJSON string, if 'raw' returns js object.
      * @return {string|Object}
      */
-    public exportData(format?: string): string | any;
+    public exportData(format?: string): string | T;
     /**
      * Returns collection data based on filter and on passed settings. Supports skip, limit and sort.
      * Order is 'filter' then 'sort' then 'skip' then 'limit'.
@@ -39,7 +39,7 @@
      * sort is a standard js array sort function.
      * @return {Object}
      */
-    public fetch(settings?: any): any;
+    public fetch(settings?: any): T[];
     /**
      * Returns reactive collection object.
      * @see ddpReactiveCollection
@@ -47,7 +47,7 @@
      * @param {Object} [settings={skip:0,limit:Infinity,sort:null}]
      * @return {ddpReactiveCollection}
      */
-    public reactive(settings?: any): ddpReactiveCollection;
+    public reactive(settings?: any): ddpReactiveCollection<T>;
     /**
      * Returns change observer.
      * @see ddpOnChange
--- a/simpleddp/classes/ddpReactiveCollection.d.ts
+++ b/simpleddp/classes/ddpReactiveCollection.d.ts
@@ -5,7 +5,7 @@
  * @param {Object} [settings={skip:0,limit:Infinity,sort:false}] - Object for declarative reactive collection slicing.
  * @param {Function} [filter=undefined] - Filter function.
  */
-export class ddpReactiveCollection {
+export class ddpReactiveCollection<T> {
     constructor(ddpCollectionInstance: any, settings: any, filter: any);
     _skip: any;
     _limit: any;
@@ -110,13 +110,13 @@
      * @public
      * @return {Array} - Local collection with applied sorting, skip and limit.
      */
-    public data(): any[];
+    public data(): T[];
     /**
      * Runs a function every time a change occurs.
      * @param {Function} f - Function which recieves new collection at each change.
      * @public
      */
-    public onChange(f: Function): ddpOnChange;
+    public onChange(f: (collection: T[]) => void): ddpOnChange;
     /**
      * Maps reactive local collection to another reactive array.
      * Specified function form {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map}.
@@ -124,7 +124,7 @@
      * @param {Function} f - Function that produces an element of the new Array.
      * @return {ddpReducer} - Object that allows to get reactive mapped data @see ddpReducer.
      */
-    public map(f: Function): ddpReducer;
+    public map<A>(f: (el: T, index: number, array: T[]) => A): ddpReducer<A[]>;
     /**
      * Reduces reactive local collection.
      * Specified function form {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce}.
@@ -133,7 +133,7 @@
      * @param {*} initialValue - Value to use as the first argument to the first call of the function.
      * @return {ddpReducer} - Object that allows to get reactive object based on reduced reactive local collection @see ddpReducer.
      */
-    public reduce(f: Function, initialValue: any): ddpReducer;
+    public reduce<U>(f: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): ddpReducer<U>;
     /**
      * Reactive length of the local collection.
      * @public
--- a/simpleddp/index.d.ts
+++ b/simpleddp/index.d.ts
@@ -66,7 +66,7 @@
      * @param {string} name - Collection name.
      * @return {ddpCollection}
      */
-    public collection(name: string): ddpCollection;
+    public collection<T>(name: string): ddpCollection<T>;
     /**
      * Dispatcher for ddp added messages.
      * @private
--- a/simpleddp/classes/ddpReducer.d.ts
+++ b/simpleddp/classes/ddpReducer.d.ts
@@ -5,8 +5,8 @@
  * @param {Function} reducer - Function for a reduction.
  * @param {*} initialValue - Initial value for a reduction function.
  */
-export class ddpReducer {
-    constructor(ddpReactiveCollectionInstance: any, reducer: any, initialValue: any);
+export class ddpReducer<U> {
+    constructor<T>(ddpReactiveCollectionInstance: any, reducer: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U);
     _ddpReactiveCollectionInstance: any;
     _reducer: any;
     _started: boolean;
@@ -42,6 +42,6 @@
      * @param {Function} f - Function which recieves a reduced value at each change.
      * @public
      */
-    public onChange(f: Function): ddpOnChange;
+    public onChange(f: (reducedValue: U) => void): ddpOnChange;
 }
 import { ddpOnChange } from "./ddpOnChange.js";
